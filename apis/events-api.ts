/* tslint:disable */
/* eslint-disable */
/**
 * Deep Lynx
 * The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.  The Deep Lynx Core API delivers a few main features.  1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.  2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateEventActionRequest } from '../models';
import { CreateEventActionResponse } from '../models';
import { CreateEventRequest } from '../models';
import { CreateEventResponse } from '../models';
import { Generic200Response } from '../models';
import { GetEventActionResponse } from '../models';
import { GetEventActionStatusResponse } from '../models';
import { ListEventActionResponse } from '../models';
import { ListEventActionStatusResponse } from '../models';
import { UpdateEventActionResponse } from '../models';
import { UpdateEventActionStatusRequest } from '../models';
import { UpdateEventActionStatusResponse } from '../models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new event
         * @summary Create Event
         * @param {CreateEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (body: CreateEventRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createEvent.');
            }
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an event action
         * @summary Create Event Action
         * @param {CreateEventActionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventAction: async (body: CreateEventActionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createEventAction.');
            }
            const localVarPath = `/event_actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an event action
         * @summary Delete Event Action
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventAction: async (actionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling deleteEventAction.');
            }
            const localVarPath = `/event_actions/{action_id}`
                .replace(`{${"action_id"}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all event action statuses
         * @summary List Event Action Statuses
         * @param {string} [eventID] Filter returned statuses by the event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventActionStatuses: async (eventID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/event_action_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            if (eventID !== undefined) {
                localVarQueryParameter['eventID'] = eventID;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all event actions
         * @summary List Event Actions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventActions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/event_actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an event action
         * @summary Retrieve Event Action
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEventAction: async (actionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling retrieveEventAction.');
            }
            const localVarPath = `/event_actions/{action_id}`
                .replace(`{${"action_id"}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an event action status
         * @summary Retrieve Event Action Status
         * @param {string} statusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEventActionStatus: async (statusId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'statusId' is not null or undefined
            if (statusId === null || statusId === undefined) {
                throw new RequiredError('statusId','Required parameter statusId was null or undefined when calling retrieveEventActionStatus.');
            }
            const localVarPath = `/event_action_status/{status_id}`
                .replace(`{${"status_id"}}`, encodeURIComponent(String(statusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an event action
         * @summary Update Event Action
         * @param {string} actionId 
         * @param {CreateEventActionRequest} [body] 
         * @param {boolean} [active] Sets the event action active or inactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventAction: async (actionId: string, body?: CreateEventActionRequest, active?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling updateEventAction.');
            }
            const localVarPath = `/event_actions/{action_id}`
                .replace(`{${"action_id"}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an event action status
         * @summary Update Event Action Status
         * @param {string} statusId 
         * @param {UpdateEventActionStatusRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventActionStatus: async (statusId: string, body?: UpdateEventActionStatusRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'statusId' is not null or undefined
            if (statusId === null || statusId === undefined) {
                throw new RequiredError('statusId','Required parameter statusId was null or undefined when calling updateEventActionStatus.');
            }
            const localVarPath = `/event_action_status/{status_id}`
                .replace(`{${"status_id"}}`, encodeURIComponent(String(statusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create new event
         * @summary Create Event
         * @param {CreateEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(body: CreateEventRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).createEvent(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create an event action
         * @summary Create Event Action
         * @param {CreateEventActionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEventAction(body: CreateEventActionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventActionResponse>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).createEventAction(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an event action
         * @summary Delete Event Action
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventAction(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic200Response>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).deleteEventAction(actionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all event action statuses
         * @summary List Event Action Statuses
         * @param {string} [eventID] Filter returned statuses by the event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEventActionStatuses(eventID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEventActionStatusResponse>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).listEventActionStatuses(eventID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all event actions
         * @summary List Event Actions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEventActions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEventActionResponse>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).listEventActions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve an event action
         * @summary Retrieve Event Action
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveEventAction(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventActionResponse>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).retrieveEventAction(actionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve an event action status
         * @summary Retrieve Event Action Status
         * @param {string} statusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveEventActionStatus(statusId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventActionStatusResponse>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).retrieveEventActionStatus(statusId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an event action
         * @summary Update Event Action
         * @param {string} actionId 
         * @param {CreateEventActionRequest} [body] 
         * @param {boolean} [active] Sets the event action active or inactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventAction(actionId: string, body?: CreateEventActionRequest, active?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateEventActionResponse>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).updateEventAction(actionId, body, active, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an event action status
         * @summary Update Event Action Status
         * @param {string} statusId 
         * @param {UpdateEventActionStatusRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventActionStatus(statusId: string, body?: UpdateEventActionStatusRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateEventActionStatusResponse>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).updateEventActionStatus(statusId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create new event
         * @summary Create Event
         * @param {CreateEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(body: CreateEventRequest, options?: any): AxiosPromise<CreateEventResponse> {
            return EventsApiFp(configuration).createEvent(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an event action
         * @summary Create Event Action
         * @param {CreateEventActionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventAction(body: CreateEventActionRequest, options?: any): AxiosPromise<CreateEventActionResponse> {
            return EventsApiFp(configuration).createEventAction(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an event action
         * @summary Delete Event Action
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventAction(actionId: string, options?: any): AxiosPromise<Generic200Response> {
            return EventsApiFp(configuration).deleteEventAction(actionId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all event action statuses
         * @summary List Event Action Statuses
         * @param {string} [eventID] Filter returned statuses by the event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventActionStatuses(eventID?: string, options?: any): AxiosPromise<ListEventActionStatusResponse> {
            return EventsApiFp(configuration).listEventActionStatuses(eventID, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all event actions
         * @summary List Event Actions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventActions(options?: any): AxiosPromise<ListEventActionResponse> {
            return EventsApiFp(configuration).listEventActions(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an event action
         * @summary Retrieve Event Action
         * @param {string} actionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEventAction(actionId: string, options?: any): AxiosPromise<GetEventActionResponse> {
            return EventsApiFp(configuration).retrieveEventAction(actionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an event action status
         * @summary Retrieve Event Action Status
         * @param {string} statusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEventActionStatus(statusId: string, options?: any): AxiosPromise<GetEventActionStatusResponse> {
            return EventsApiFp(configuration).retrieveEventActionStatus(statusId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an event action
         * @summary Update Event Action
         * @param {string} actionId 
         * @param {CreateEventActionRequest} [body] 
         * @param {boolean} [active] Sets the event action active or inactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventAction(actionId: string, body?: CreateEventActionRequest, active?: boolean, options?: any): AxiosPromise<UpdateEventActionResponse> {
            return EventsApiFp(configuration).updateEventAction(actionId, body, active, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an event action status
         * @summary Update Event Action Status
         * @param {string} statusId 
         * @param {UpdateEventActionStatusRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventActionStatus(statusId: string, body?: UpdateEventActionStatusRequest, options?: any): AxiosPromise<UpdateEventActionStatusResponse> {
            return EventsApiFp(configuration).updateEventActionStatus(statusId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * Create new event
     * @summary Create Event
     * @param {CreateEventRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public createEvent(body: CreateEventRequest, options?: any) {
        return EventsApiFp(this.configuration).createEvent(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an event action
     * @summary Create Event Action
     * @param {CreateEventActionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public createEventAction(body: CreateEventActionRequest, options?: any) {
        return EventsApiFp(this.configuration).createEventAction(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an event action
     * @summary Delete Event Action
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteEventAction(actionId: string, options?: any) {
        return EventsApiFp(this.configuration).deleteEventAction(actionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all event action statuses
     * @summary List Event Action Statuses
     * @param {string} [eventID] Filter returned statuses by the event ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listEventActionStatuses(eventID?: string, options?: any) {
        return EventsApiFp(this.configuration).listEventActionStatuses(eventID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all event actions
     * @summary List Event Actions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listEventActions(options?: any) {
        return EventsApiFp(this.configuration).listEventActions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve an event action
     * @summary Retrieve Event Action
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public retrieveEventAction(actionId: string, options?: any) {
        return EventsApiFp(this.configuration).retrieveEventAction(actionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve an event action status
     * @summary Retrieve Event Action Status
     * @param {string} statusId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public retrieveEventActionStatus(statusId: string, options?: any) {
        return EventsApiFp(this.configuration).retrieveEventActionStatus(statusId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an event action
     * @summary Update Event Action
     * @param {string} actionId 
     * @param {CreateEventActionRequest} [body] 
     * @param {boolean} [active] Sets the event action active or inactive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateEventAction(actionId: string, body?: CreateEventActionRequest, active?: boolean, options?: any) {
        return EventsApiFp(this.configuration).updateEventAction(actionId, body, active, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an event action status
     * @summary Update Event Action Status
     * @param {string} statusId 
     * @param {UpdateEventActionStatusRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateEventActionStatus(statusId: string, body?: UpdateEventActionStatusRequest, options?: any) {
        return EventsApiFp(this.configuration).updateEventActionStatus(statusId, body, options).then((request) => request(this.axios, this.basePath));
    }
}

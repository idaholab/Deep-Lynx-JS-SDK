/* tslint:disable */
/* eslint-disable */
/**
 * Deep Lynx
 * The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.  The Deep Lynx Core API delivers a few main features.  1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.  2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateMetatypeRelationshipPairRequest } from '../models';
import { CreateMetatypeRelationshipPairsResponse } from '../models';
import { Generic200Response } from '../models';
import { GetMetatypeRelationshipPairResponse } from '../models';
import { ListMetatypeRelationshipPairsResponse } from '../models';
import { RelationshipPair } from '../models';
import { UpdateMetatypeRelationshipPairResponse } from '../models';
/**
 * MetatypeRelationshipPairsApi - axios parameter creator
 * @export
 */
export const MetatypeRelationshipPairsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Archives a Metatype Relationship Pair.
         * @summary Archive Metatype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveMetatypeRelationshipPair: async (containerId: string, pairId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling archiveMetatypeRelationshipPair.');
            }
            // verify required parameter 'pairId' is not null or undefined
            if (pairId === null || pairId === undefined) {
                throw new RequiredError('pairId','Required parameter pairId was null or undefined when calling archiveMetatypeRelationshipPair.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationship_pairs/{pair_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"pair_id"}}`, encodeURIComponent(String(pairId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Metaype Relationship Pair. Describes the connection between two metatypes by connecting them using a Metatype Relationship.  Pass in an array for bulk creation.
         * @summary Create Metatype Relationship Pair
         * @param {CreateMetatypeRelationshipPairRequest} body 
         * @param {string} containerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetatypeRelationshipPair: async (body: CreateMetatypeRelationshipPairRequest, containerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMetatypeRelationshipPair.');
            }
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling createMetatypeRelationshipPair.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationship_pairs`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Metatype Relationship Pairs for current container.
         * @summary List Metatype Relationship Pairs
         * @param {string} containerId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [name] Filter metatype relationship pairs with names that match this pattern
         * @param {string} [archived] Set to true to include archived metatype relationship pairs
         * @param {string} [count] Set to true to return an integer count of the number of metatype relationship pairs
         * @param {string} [loadRelationships] Set to false to not return the relationships for the selected metatype relationship pairs (true by default)
         * @param {string} [destinationID] Filter destination by metatype ID
         * @param {string} [originID] Filter origin by metatype ID
         * @param {string} [metatypeID] Filter by metatype ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMetatypeRelationshipPairs: async (containerId: string, limit?: number, offset?: number, name?: string, archived?: string, count?: string, loadRelationships?: string, destinationID?: string, originID?: string, metatypeID?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling listMetatypeRelationshipPairs.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationship_pairs`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (archived !== undefined) {
                localVarQueryParameter['archived'] = archived;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (loadRelationships !== undefined) {
                localVarQueryParameter['loadRelationships'] = loadRelationships;
            }

            if (destinationID !== undefined) {
                localVarQueryParameter['destinationID'] = destinationID;
            }

            if (originID !== undefined) {
                localVarQueryParameter['originID'] = originID;
            }

            if (metatypeID !== undefined) {
                localVarQueryParameter['metatypeID'] = metatypeID;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single Metatype Relationship Pair.
         * @summary Retrieve Metatype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMetatypeRelationshipPair: async (containerId: string, pairId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling retrieveMetatypeRelationshipPair.');
            }
            // verify required parameter 'pairId' is not null or undefined
            if (pairId === null || pairId === undefined) {
                throw new RequiredError('pairId','Required parameter pairId was null or undefined when calling retrieveMetatypeRelationshipPair.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationship_pairs/{pair_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"pair_id"}}`, encodeURIComponent(String(pairId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the specified metatype relationship pair.
         * @summary Update Metaype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {RelationshipPair} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetatypeRelationshipPair: async (containerId: string, pairId: string, body?: RelationshipPair, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling updateMetatypeRelationshipPair.');
            }
            // verify required parameter 'pairId' is not null or undefined
            if (pairId === null || pairId === undefined) {
                throw new RequiredError('pairId','Required parameter pairId was null or undefined when calling updateMetatypeRelationshipPair.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationship_pairs/{pair_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"pair_id"}}`, encodeURIComponent(String(pairId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetatypeRelationshipPairsApi - functional programming interface
 * @export
 */
export const MetatypeRelationshipPairsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Archives a Metatype Relationship Pair.
         * @summary Archive Metatype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveMetatypeRelationshipPair(containerId: string, pairId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic200Response>> {
            const localVarAxiosArgs = await MetatypeRelationshipPairsApiAxiosParamCreator(configuration).archiveMetatypeRelationshipPair(containerId, pairId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new Metaype Relationship Pair. Describes the connection between two metatypes by connecting them using a Metatype Relationship.  Pass in an array for bulk creation.
         * @summary Create Metatype Relationship Pair
         * @param {CreateMetatypeRelationshipPairRequest} body 
         * @param {string} containerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMetatypeRelationshipPair(body: CreateMetatypeRelationshipPairRequest, containerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMetatypeRelationshipPairsResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipPairsApiAxiosParamCreator(configuration).createMetatypeRelationshipPair(body, containerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all Metatype Relationship Pairs for current container.
         * @summary List Metatype Relationship Pairs
         * @param {string} containerId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [name] Filter metatype relationship pairs with names that match this pattern
         * @param {string} [archived] Set to true to include archived metatype relationship pairs
         * @param {string} [count] Set to true to return an integer count of the number of metatype relationship pairs
         * @param {string} [loadRelationships] Set to false to not return the relationships for the selected metatype relationship pairs (true by default)
         * @param {string} [destinationID] Filter destination by metatype ID
         * @param {string} [originID] Filter origin by metatype ID
         * @param {string} [metatypeID] Filter by metatype ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMetatypeRelationshipPairs(containerId: string, limit?: number, offset?: number, name?: string, archived?: string, count?: string, loadRelationships?: string, destinationID?: string, originID?: string, metatypeID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMetatypeRelationshipPairsResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipPairsApiAxiosParamCreator(configuration).listMetatypeRelationshipPairs(containerId, limit, offset, name, archived, count, loadRelationships, destinationID, originID, metatypeID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single Metatype Relationship Pair.
         * @summary Retrieve Metatype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveMetatypeRelationshipPair(containerId: string, pairId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMetatypeRelationshipPairResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipPairsApiAxiosParamCreator(configuration).retrieveMetatypeRelationshipPair(containerId, pairId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the specified metatype relationship pair.
         * @summary Update Metaype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {RelationshipPair} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetatypeRelationshipPair(containerId: string, pairId: string, body?: RelationshipPair, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMetatypeRelationshipPairResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipPairsApiAxiosParamCreator(configuration).updateMetatypeRelationshipPair(containerId, pairId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetatypeRelationshipPairsApi - factory interface
 * @export
 */
export const MetatypeRelationshipPairsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Archives a Metatype Relationship Pair.
         * @summary Archive Metatype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveMetatypeRelationshipPair(containerId: string, pairId: string, options?: any): AxiosPromise<Generic200Response> {
            return MetatypeRelationshipPairsApiFp(configuration).archiveMetatypeRelationshipPair(containerId, pairId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Metaype Relationship Pair. Describes the connection between two metatypes by connecting them using a Metatype Relationship.  Pass in an array for bulk creation.
         * @summary Create Metatype Relationship Pair
         * @param {CreateMetatypeRelationshipPairRequest} body 
         * @param {string} containerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetatypeRelationshipPair(body: CreateMetatypeRelationshipPairRequest, containerId: string, options?: any): AxiosPromise<CreateMetatypeRelationshipPairsResponse> {
            return MetatypeRelationshipPairsApiFp(configuration).createMetatypeRelationshipPair(body, containerId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Metatype Relationship Pairs for current container.
         * @summary List Metatype Relationship Pairs
         * @param {string} containerId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [name] Filter metatype relationship pairs with names that match this pattern
         * @param {string} [archived] Set to true to include archived metatype relationship pairs
         * @param {string} [count] Set to true to return an integer count of the number of metatype relationship pairs
         * @param {string} [loadRelationships] Set to false to not return the relationships for the selected metatype relationship pairs (true by default)
         * @param {string} [destinationID] Filter destination by metatype ID
         * @param {string} [originID] Filter origin by metatype ID
         * @param {string} [metatypeID] Filter by metatype ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMetatypeRelationshipPairs(containerId: string, limit?: number, offset?: number, name?: string, archived?: string, count?: string, loadRelationships?: string, destinationID?: string, originID?: string, metatypeID?: string, options?: any): AxiosPromise<ListMetatypeRelationshipPairsResponse> {
            return MetatypeRelationshipPairsApiFp(configuration).listMetatypeRelationshipPairs(containerId, limit, offset, name, archived, count, loadRelationships, destinationID, originID, metatypeID, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single Metatype Relationship Pair.
         * @summary Retrieve Metatype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMetatypeRelationshipPair(containerId: string, pairId: string, options?: any): AxiosPromise<GetMetatypeRelationshipPairResponse> {
            return MetatypeRelationshipPairsApiFp(configuration).retrieveMetatypeRelationshipPair(containerId, pairId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified metatype relationship pair.
         * @summary Update Metaype Relationship Pair
         * @param {string} containerId 
         * @param {string} pairId 
         * @param {RelationshipPair} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetatypeRelationshipPair(containerId: string, pairId: string, body?: RelationshipPair, options?: any): AxiosPromise<UpdateMetatypeRelationshipPairResponse> {
            return MetatypeRelationshipPairsApiFp(configuration).updateMetatypeRelationshipPair(containerId, pairId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetatypeRelationshipPairsApi - object-oriented interface
 * @export
 * @class MetatypeRelationshipPairsApi
 * @extends {BaseAPI}
 */
export class MetatypeRelationshipPairsApi extends BaseAPI {
    /**
     * Archives a Metatype Relationship Pair.
     * @summary Archive Metatype Relationship Pair
     * @param {string} containerId 
     * @param {string} pairId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipPairsApi
     */
    public archiveMetatypeRelationshipPair(containerId: string, pairId: string, options?: any) {
        return MetatypeRelationshipPairsApiFp(this.configuration).archiveMetatypeRelationshipPair(containerId, pairId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new Metaype Relationship Pair. Describes the connection between two metatypes by connecting them using a Metatype Relationship.  Pass in an array for bulk creation.
     * @summary Create Metatype Relationship Pair
     * @param {CreateMetatypeRelationshipPairRequest} body 
     * @param {string} containerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipPairsApi
     */
    public createMetatypeRelationshipPair(body: CreateMetatypeRelationshipPairRequest, containerId: string, options?: any) {
        return MetatypeRelationshipPairsApiFp(this.configuration).createMetatypeRelationshipPair(body, containerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all Metatype Relationship Pairs for current container.
     * @summary List Metatype Relationship Pairs
     * @param {string} containerId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [name] Filter metatype relationship pairs with names that match this pattern
     * @param {string} [archived] Set to true to include archived metatype relationship pairs
     * @param {string} [count] Set to true to return an integer count of the number of metatype relationship pairs
     * @param {string} [loadRelationships] Set to false to not return the relationships for the selected metatype relationship pairs (true by default)
     * @param {string} [destinationID] Filter destination by metatype ID
     * @param {string} [originID] Filter origin by metatype ID
     * @param {string} [metatypeID] Filter by metatype ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipPairsApi
     */
    public listMetatypeRelationshipPairs(containerId: string, limit?: number, offset?: number, name?: string, archived?: string, count?: string, loadRelationships?: string, destinationID?: string, originID?: string, metatypeID?: string, options?: any) {
        return MetatypeRelationshipPairsApiFp(this.configuration).listMetatypeRelationshipPairs(containerId, limit, offset, name, archived, count, loadRelationships, destinationID, originID, metatypeID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a single Metatype Relationship Pair.
     * @summary Retrieve Metatype Relationship Pair
     * @param {string} containerId 
     * @param {string} pairId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipPairsApi
     */
    public retrieveMetatypeRelationshipPair(containerId: string, pairId: string, options?: any) {
        return MetatypeRelationshipPairsApiFp(this.configuration).retrieveMetatypeRelationshipPair(containerId, pairId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the specified metatype relationship pair.
     * @summary Update Metaype Relationship Pair
     * @param {string} containerId 
     * @param {string} pairId 
     * @param {RelationshipPair} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipPairsApi
     */
    public updateMetatypeRelationshipPair(containerId: string, pairId: string, body?: RelationshipPair, options?: any) {
        return MetatypeRelationshipPairsApiFp(this.configuration).updateMetatypeRelationshipPair(containerId, pairId, body, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Deep Lynx
 * The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.  The Deep Lynx Core API delivers a few main features.  1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.  2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { TokenExchangeRequest } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exchanges credentials for a JSON Web Token (JWT). Multiple authentication flows are supported, see Deep Lynx documentation for details.
         * @summary ExchangeOAuthToken
         * @param {TokenExchangeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeOAuthToken: async (body?: TokenExchangeRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an OAuth token. The API key and secret must be supplied.
         * @summary RetrieveOAuthToken
         * @param {string} xApiKey The API key
         * @param {string} xApiSecret The API secret
         * @param {string} [xApiExpiry] The API expiry date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOAuthToken: async (xApiKey: string, xApiSecret: string, xApiExpiry?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling retrieveOAuthToken.');
            }
            // verify required parameter 'xApiSecret' is not null or undefined
            if (xApiSecret === null || xApiSecret === undefined) {
                throw new RequiredError('xApiSecret','Required parameter xApiSecret was null or undefined when calling retrieveOAuthToken.');
            }
            const localVarPath = `/oauth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpBearer required

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (xApiSecret !== undefined && xApiSecret !== null) {
                localVarHeaderParameter['x-api-secret'] = String(xApiSecret);
            }

            if (xApiExpiry !== undefined && xApiExpiry !== null) {
                localVarHeaderParameter['x-api-expiry'] = String(xApiExpiry);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Exchanges credentials for a JSON Web Token (JWT). Multiple authentication flows are supported, see Deep Lynx documentation for details.
         * @summary ExchangeOAuthToken
         * @param {TokenExchangeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exchangeOAuthToken(body?: TokenExchangeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).exchangeOAuthToken(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an OAuth token. The API key and secret must be supplied.
         * @summary RetrieveOAuthToken
         * @param {string} xApiKey The API key
         * @param {string} xApiSecret The API secret
         * @param {string} [xApiExpiry] The API expiry date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveOAuthToken(xApiKey: string, xApiSecret: string, xApiExpiry?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).retrieveOAuthToken(xApiKey, xApiSecret, xApiExpiry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Exchanges credentials for a JSON Web Token (JWT). Multiple authentication flows are supported, see Deep Lynx documentation for details.
         * @summary ExchangeOAuthToken
         * @param {TokenExchangeRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeOAuthToken(body?: TokenExchangeRequest, options?: any): AxiosPromise<string> {
            return AuthenticationApiFp(configuration).exchangeOAuthToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an OAuth token. The API key and secret must be supplied.
         * @summary RetrieveOAuthToken
         * @param {string} xApiKey The API key
         * @param {string} xApiSecret The API secret
         * @param {string} [xApiExpiry] The API expiry date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOAuthToken(xApiKey: string, xApiSecret: string, xApiExpiry?: string, options?: any): AxiosPromise<string> {
            return AuthenticationApiFp(configuration).retrieveOAuthToken(xApiKey, xApiSecret, xApiExpiry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Exchanges credentials for a JSON Web Token (JWT). Multiple authentication flows are supported, see Deep Lynx documentation for details.
     * @summary ExchangeOAuthToken
     * @param {TokenExchangeRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public exchangeOAuthToken(body?: TokenExchangeRequest, options?: any) {
        return AuthenticationApiFp(this.configuration).exchangeOAuthToken(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an OAuth token. The API key and secret must be supplied.
     * @summary RetrieveOAuthToken
     * @param {string} xApiKey The API key
     * @param {string} xApiSecret The API secret
     * @param {string} [xApiExpiry] The API expiry date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public retrieveOAuthToken(xApiKey: string, xApiSecret: string, xApiExpiry?: string, options?: any) {
        return AuthenticationApiFp(this.configuration).retrieveOAuthToken(xApiKey, xApiSecret, xApiExpiry, options).then((request) => request(this.axios, this.basePath));
    }
}

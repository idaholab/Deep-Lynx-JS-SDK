/* tslint:disable */
/* eslint-disable */
/**
 * Deep Lynx
 * The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.  The Deep Lynx Core API delivers a few main features.  1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.  2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateMetatypeRelationshipRequest } from '../models';
import { CreateMetatypeRelationshipsResponse } from '../models';
import { Generic200Response } from '../models';
import { GetMetatypeRelationshipResponse } from '../models';
import { ListMetatypeRelationshipsResponse } from '../models';
import { UpdateMetatypeRelationshipRequest } from '../models';
import { UpdateMetatypeRelationshipResponse } from '../models';
/**
 * MetatypeRelationshipsApi - axios parameter creator
 * @export
 */
export const MetatypeRelationshipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Archive the metatype relationship.
         * @summary Archive Metatype Relationship
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveMetatypeRelationship: async (containerId: string, relationshipId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling archiveMetatypeRelationship.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling archiveMetatypeRelationship.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships/{relationship_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new metatype relationship. Describes the connection that could exist between two metatypes and acts as a vehicle for relationship specific keys.  Pass in an array for bulk creation.
         * @summary Create Metatype Relationship
         * @param {CreateMetatypeRelationshipRequest} body 
         * @param {string} containerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetatypeRelationship: async (body: CreateMetatypeRelationshipRequest, containerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMetatypeRelationship.');
            }
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling createMetatypeRelationship.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List metatype relationships. Describes the connection between two metatypes and acts as a vehicle for relationship specific keys.
         * @summary List Metatype Relationships
         * @param {string} containerId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [name] Filter metatype relationships with names that match this pattern
         * @param {string} [description] Filter metatype relationships with descriptions that match this pattern
         * @param {string} [count] Set to true to return an integer count of the number of metatype relationships
         * @param {string} [loadKeys] Set to false to not return the keys for the selected metatype relationships (true by default)
         * @param {string} [sortBy] Supply the name of a metatype relationship attribute (name, created_at, etc) by which to sort
         * @param {string} [sortDesc] Set true to sort descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMetatypeRelationships: async (containerId: string, limit?: number, offset?: number, name?: string, description?: string, count?: string, loadKeys?: string, sortBy?: string, sortDesc?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling listMetatypeRelationships.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (loadKeys !== undefined) {
                localVarQueryParameter['loadKeys'] = loadKeys;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sortDesc'] = sortDesc;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single Metatype Relationship.
         * @summary Retrieve Metatype Relationship
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMetatypeRelationship: async (containerId: string, relationshipId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling retrieveMetatypeRelationship.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling retrieveMetatypeRelationship.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships/{relationship_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the specified metatype relationship.
         * @summary Update Metatype Relationship
         * @param {UpdateMetatypeRelationshipRequest} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetatypeRelationship: async (body: UpdateMetatypeRelationshipRequest, containerId: string, relationshipId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMetatypeRelationship.');
            }
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling updateMetatypeRelationship.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling updateMetatypeRelationship.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships/{relationship_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetatypeRelationshipsApi - functional programming interface
 * @export
 */
export const MetatypeRelationshipsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Archive the metatype relationship.
         * @summary Archive Metatype Relationship
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveMetatypeRelationship(containerId: string, relationshipId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic200Response>> {
            const localVarAxiosArgs = await MetatypeRelationshipsApiAxiosParamCreator(configuration).archiveMetatypeRelationship(containerId, relationshipId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new metatype relationship. Describes the connection that could exist between two metatypes and acts as a vehicle for relationship specific keys.  Pass in an array for bulk creation.
         * @summary Create Metatype Relationship
         * @param {CreateMetatypeRelationshipRequest} body 
         * @param {string} containerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMetatypeRelationship(body: CreateMetatypeRelationshipRequest, containerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMetatypeRelationshipsResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipsApiAxiosParamCreator(configuration).createMetatypeRelationship(body, containerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List metatype relationships. Describes the connection between two metatypes and acts as a vehicle for relationship specific keys.
         * @summary List Metatype Relationships
         * @param {string} containerId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [name] Filter metatype relationships with names that match this pattern
         * @param {string} [description] Filter metatype relationships with descriptions that match this pattern
         * @param {string} [count] Set to true to return an integer count of the number of metatype relationships
         * @param {string} [loadKeys] Set to false to not return the keys for the selected metatype relationships (true by default)
         * @param {string} [sortBy] Supply the name of a metatype relationship attribute (name, created_at, etc) by which to sort
         * @param {string} [sortDesc] Set true to sort descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMetatypeRelationships(containerId: string, limit?: number, offset?: number, name?: string, description?: string, count?: string, loadKeys?: string, sortBy?: string, sortDesc?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMetatypeRelationshipsResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipsApiAxiosParamCreator(configuration).listMetatypeRelationships(containerId, limit, offset, name, description, count, loadKeys, sortBy, sortDesc, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a single Metatype Relationship.
         * @summary Retrieve Metatype Relationship
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveMetatypeRelationship(containerId: string, relationshipId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMetatypeRelationshipResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipsApiAxiosParamCreator(configuration).retrieveMetatypeRelationship(containerId, relationshipId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the specified metatype relationship.
         * @summary Update Metatype Relationship
         * @param {UpdateMetatypeRelationshipRequest} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetatypeRelationship(body: UpdateMetatypeRelationshipRequest, containerId: string, relationshipId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMetatypeRelationshipResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipsApiAxiosParamCreator(configuration).updateMetatypeRelationship(body, containerId, relationshipId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetatypeRelationshipsApi - factory interface
 * @export
 */
export const MetatypeRelationshipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Archive the metatype relationship.
         * @summary Archive Metatype Relationship
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveMetatypeRelationship(containerId: string, relationshipId: string, options?: any): AxiosPromise<Generic200Response> {
            return MetatypeRelationshipsApiFp(configuration).archiveMetatypeRelationship(containerId, relationshipId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new metatype relationship. Describes the connection that could exist between two metatypes and acts as a vehicle for relationship specific keys.  Pass in an array for bulk creation.
         * @summary Create Metatype Relationship
         * @param {CreateMetatypeRelationshipRequest} body 
         * @param {string} containerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetatypeRelationship(body: CreateMetatypeRelationshipRequest, containerId: string, options?: any): AxiosPromise<CreateMetatypeRelationshipsResponse> {
            return MetatypeRelationshipsApiFp(configuration).createMetatypeRelationship(body, containerId, options).then((request) => request(axios, basePath));
        },
        /**
         * List metatype relationships. Describes the connection between two metatypes and acts as a vehicle for relationship specific keys.
         * @summary List Metatype Relationships
         * @param {string} containerId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [name] Filter metatype relationships with names that match this pattern
         * @param {string} [description] Filter metatype relationships with descriptions that match this pattern
         * @param {string} [count] Set to true to return an integer count of the number of metatype relationships
         * @param {string} [loadKeys] Set to false to not return the keys for the selected metatype relationships (true by default)
         * @param {string} [sortBy] Supply the name of a metatype relationship attribute (name, created_at, etc) by which to sort
         * @param {string} [sortDesc] Set true to sort descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMetatypeRelationships(containerId: string, limit?: number, offset?: number, name?: string, description?: string, count?: string, loadKeys?: string, sortBy?: string, sortDesc?: string, options?: any): AxiosPromise<ListMetatypeRelationshipsResponse> {
            return MetatypeRelationshipsApiFp(configuration).listMetatypeRelationships(containerId, limit, offset, name, description, count, loadKeys, sortBy, sortDesc, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single Metatype Relationship.
         * @summary Retrieve Metatype Relationship
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMetatypeRelationship(containerId: string, relationshipId: string, options?: any): AxiosPromise<GetMetatypeRelationshipResponse> {
            return MetatypeRelationshipsApiFp(configuration).retrieveMetatypeRelationship(containerId, relationshipId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the specified metatype relationship.
         * @summary Update Metatype Relationship
         * @param {UpdateMetatypeRelationshipRequest} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetatypeRelationship(body: UpdateMetatypeRelationshipRequest, containerId: string, relationshipId: string, options?: any): AxiosPromise<UpdateMetatypeRelationshipResponse> {
            return MetatypeRelationshipsApiFp(configuration).updateMetatypeRelationship(body, containerId, relationshipId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetatypeRelationshipsApi - object-oriented interface
 * @export
 * @class MetatypeRelationshipsApi
 * @extends {BaseAPI}
 */
export class MetatypeRelationshipsApi extends BaseAPI {
    /**
     * Archive the metatype relationship.
     * @summary Archive Metatype Relationship
     * @param {string} containerId 
     * @param {string} relationshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipsApi
     */
    public archiveMetatypeRelationship(containerId: string, relationshipId: string, options?: any) {
        return MetatypeRelationshipsApiFp(this.configuration).archiveMetatypeRelationship(containerId, relationshipId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new metatype relationship. Describes the connection that could exist between two metatypes and acts as a vehicle for relationship specific keys.  Pass in an array for bulk creation.
     * @summary Create Metatype Relationship
     * @param {CreateMetatypeRelationshipRequest} body 
     * @param {string} containerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipsApi
     */
    public createMetatypeRelationship(body: CreateMetatypeRelationshipRequest, containerId: string, options?: any) {
        return MetatypeRelationshipsApiFp(this.configuration).createMetatypeRelationship(body, containerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List metatype relationships. Describes the connection between two metatypes and acts as a vehicle for relationship specific keys.
     * @summary List Metatype Relationships
     * @param {string} containerId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [name] Filter metatype relationships with names that match this pattern
     * @param {string} [description] Filter metatype relationships with descriptions that match this pattern
     * @param {string} [count] Set to true to return an integer count of the number of metatype relationships
     * @param {string} [loadKeys] Set to false to not return the keys for the selected metatype relationships (true by default)
     * @param {string} [sortBy] Supply the name of a metatype relationship attribute (name, created_at, etc) by which to sort
     * @param {string} [sortDesc] Set true to sort descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipsApi
     */
    public listMetatypeRelationships(containerId: string, limit?: number, offset?: number, name?: string, description?: string, count?: string, loadKeys?: string, sortBy?: string, sortDesc?: string, options?: any) {
        return MetatypeRelationshipsApiFp(this.configuration).listMetatypeRelationships(containerId, limit, offset, name, description, count, loadKeys, sortBy, sortDesc, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single Metatype Relationship.
     * @summary Retrieve Metatype Relationship
     * @param {string} containerId 
     * @param {string} relationshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipsApi
     */
    public retrieveMetatypeRelationship(containerId: string, relationshipId: string, options?: any) {
        return MetatypeRelationshipsApiFp(this.configuration).retrieveMetatypeRelationship(containerId, relationshipId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the specified metatype relationship.
     * @summary Update Metatype Relationship
     * @param {UpdateMetatypeRelationshipRequest} body 
     * @param {string} containerId 
     * @param {string} relationshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipsApi
     */
    public updateMetatypeRelationship(body: UpdateMetatypeRelationshipRequest, containerId: string, relationshipId: string, options?: any) {
        return MetatypeRelationshipsApiFp(this.configuration).updateMetatypeRelationship(body, containerId, relationshipId, options).then((request) => request(this.axios, this.basePath));
    }
}

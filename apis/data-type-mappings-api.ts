/* tslint:disable */
/* eslint-disable */
/**
 * Deep Lynx
 * The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.  The Deep Lynx Core API delivers a few main features.  1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.  2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateTransformationResponse } from '../models';
import { CreateTypeMappingTransformationsRequest } from '../models';
import { Generic200Response } from '../models';
import { GetDataTypeMappingResponse } from '../models';
import { ImportDataTypeMappingResponse } from '../models';
import { ListDataTypeMappingResponse } from '../models';
import { ListTransformationResponse } from '../models';
import { TypeMapping } from '../models';
import { TypeMappingExportPayload } from '../models';
import { UpdateDataTypeMappingResponse } from '../models';
import { UpdateTransformationResponse } from '../models';
/**
 * DataTypeMappingsApi - axios parameter creator
 * @export
 */
export const DataTypeMappingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a transformation for the type mapping.
         * @summary Create Data Type Mapping's Transformations
         * @param {CreateTypeMappingTransformationsRequest} body 
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransformation: async (body: CreateTypeMappingTransformationsRequest, containerId: string, dataSourceId: string, mappingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTransformation.');
            }
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling createTransformation.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling createTransformation.');
            }
            // verify required parameter 'mappingId' is not null or undefined
            if (mappingId === null || mappingId === undefined) {
                throw new RequiredError('mappingId','Required parameter mappingId was null or undefined when calling createTransformation.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}/transformations`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"mapping_id"}}`, encodeURIComponent(String(mappingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently remove data type mapping.
         * @summary Delete Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataTypeMapping: async (containerId: string, dataSourceId: string, mappingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling deleteDataTypeMapping.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling deleteDataTypeMapping.');
            }
            // verify required parameter 'mappingId' is not null or undefined
            if (mappingId === null || mappingId === undefined) {
                throw new RequiredError('mappingId','Required parameter mappingId was null or undefined when calling deleteDataTypeMapping.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"mapping_id"}}`, encodeURIComponent(String(mappingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a transformation.
         * @summary Delete Data Type Mapping's Transformations
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {string} transformationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransformation: async (containerId: string, dataSourceId: string, mappingId: string, transformationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling deleteTransformation.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling deleteTransformation.');
            }
            // verify required parameter 'mappingId' is not null or undefined
            if (mappingId === null || mappingId === undefined) {
                throw new RequiredError('mappingId','Required parameter mappingId was null or undefined when calling deleteTransformation.');
            }
            // verify required parameter 'transformationId' is not null or undefined
            if (transformationId === null || transformationId === undefined) {
                throw new RequiredError('transformationId','Required parameter transformationId was null or undefined when calling deleteTransformation.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}/transformations/{transformation_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"mapping_id"}}`, encodeURIComponent(String(mappingId)))
                .replace(`{${"transformation_id"}}`, encodeURIComponent(String(transformationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Export type mappings for a datasource. Providing a JSON body is optional. If provided, the mapping_ids may be specified to indicate certain type mapping IDs to return. Additionally, a target data source may be provided to which the mappings will be copied.
         * @summary Export Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {TypeMappingExportPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportTypeMappings: async (containerId: string, dataSourceId: string, body?: TypeMappingExportPayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling exportTypeMappings.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling exportTypeMappings.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/export`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.
         * @summary Import Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {Array&lt;any&gt;} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDataTypeMappings: async (containerId: string, dataSourceId: string, body?: Array<any>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling importDataTypeMappings.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling importDataTypeMappings.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/import`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication BearerAuth required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.
         * @summary Import Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDataTypeMappings: async (containerId: string, dataSourceId: string, file?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling importDataTypeMappings.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling importDataTypeMappings.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/import`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication BearerAuth required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists data type mappings for the data source
         * @summary List Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [needsTransformations] boolean indicating if the return should consist of only mappings that need transformations
         * @param {boolean} [count] boolean indicating if the return value should be a count only
         * @param {string} [sortBy] column to sort results by
         * @param {boolean} [sortDesc] boolean indicating if results should be in descending order
         * @param {string} [resultingMetatypeName] if supplied, filters returned transformations by those that produce the resulting metatype
         * @param {string} [resultingMetatypeRelationshipName] if supplied, filters returned transformations by those that produce the resulting metatype relationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataTypeMappings: async (containerId: string, dataSourceId: string, limit?: number, offset?: number, needsTransformations?: boolean, count?: boolean, sortBy?: string, sortDesc?: boolean, resultingMetatypeName?: string, resultingMetatypeRelationshipName?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling listDataTypeMappings.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling listDataTypeMappings.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (needsTransformations !== undefined) {
                localVarQueryParameter['needsTransformations'] = needsTransformations;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sortDesc'] = sortDesc;
            }

            if (resultingMetatypeName !== undefined) {
                localVarQueryParameter['resultingMetatypeName'] = resultingMetatypeName;
            }

            if (resultingMetatypeRelationshipName !== undefined) {
                localVarQueryParameter['resultingMetatypeRelationshipName'] = resultingMetatypeRelationshipName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List transformations for a type mapping from storage.
         * @summary List Data Type Mapping's Transformations
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransformations: async (containerId: string, dataSourceId: string, mappingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling listTransformations.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling listTransformations.');
            }
            // verify required parameter 'mappingId' is not null or undefined
            if (mappingId === null || mappingId === undefined) {
                throw new RequiredError('mappingId','Required parameter mappingId was null or undefined when calling listTransformations.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}/transformations`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"mapping_id"}}`, encodeURIComponent(String(mappingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a data type mapping
         * @summary Retrieve Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDataTypeMapping: async (containerId: string, dataSourceId: string, mappingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling retrieveDataTypeMapping.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling retrieveDataTypeMapping.');
            }
            // verify required parameter 'mappingId' is not null or undefined
            if (mappingId === null || mappingId === undefined) {
                throw new RequiredError('mappingId','Required parameter mappingId was null or undefined when calling retrieveDataTypeMapping.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"mapping_id"}}`, encodeURIComponent(String(mappingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a data type mapping.
         * @summary Update Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {TypeMapping} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataTypeMapping: async (containerId: string, dataSourceId: string, mappingId: string, body?: TypeMapping, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling updateDataTypeMapping.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling updateDataTypeMapping.');
            }
            // verify required parameter 'mappingId' is not null or undefined
            if (mappingId === null || mappingId === undefined) {
                throw new RequiredError('mappingId','Required parameter mappingId was null or undefined when calling updateDataTypeMapping.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"mapping_id"}}`, encodeURIComponent(String(mappingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a transformation.
         * @summary Update Data Type Mapping's Transformations
         * @param {CreateTypeMappingTransformationsRequest} body 
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {string} transformationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransformation: async (body: CreateTypeMappingTransformationsRequest, containerId: string, dataSourceId: string, mappingId: string, transformationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTransformation.');
            }
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling updateTransformation.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling updateTransformation.');
            }
            // verify required parameter 'mappingId' is not null or undefined
            if (mappingId === null || mappingId === undefined) {
                throw new RequiredError('mappingId','Required parameter mappingId was null or undefined when calling updateTransformation.');
            }
            // verify required parameter 'transformationId' is not null or undefined
            if (transformationId === null || transformationId === undefined) {
                throw new RequiredError('transformationId','Required parameter transformationId was null or undefined when calling updateTransformation.');
            }
            const localVarPath = `/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}/transformations/{transformation_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"mapping_id"}}`, encodeURIComponent(String(mappingId)))
                .replace(`{${"transformation_id"}}`, encodeURIComponent(String(transformationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataTypeMappingsApi - functional programming interface
 * @export
 */
export const DataTypeMappingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a transformation for the type mapping.
         * @summary Create Data Type Mapping's Transformations
         * @param {CreateTypeMappingTransformationsRequest} body 
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransformation(body: CreateTypeMappingTransformationsRequest, containerId: string, dataSourceId: string, mappingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransformationResponse>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).createTransformation(body, containerId, dataSourceId, mappingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Permanently remove data type mapping.
         * @summary Delete Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic200Response>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).deleteDataTypeMapping(containerId, dataSourceId, mappingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a transformation.
         * @summary Delete Data Type Mapping's Transformations
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {string} transformationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransformation(containerId: string, dataSourceId: string, mappingId: string, transformationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic200Response>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).deleteTransformation(containerId, dataSourceId, mappingId, transformationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export type mappings for a datasource. Providing a JSON body is optional. If provided, the mapping_ids may be specified to indicate certain type mapping IDs to return. Additionally, a target data source may be provided to which the mappings will be copied.
         * @summary Export Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {TypeMappingExportPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportTypeMappings(containerId: string, dataSourceId: string, body?: TypeMappingExportPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypeMapping>>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).exportTypeMappings(containerId, dataSourceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.
         * @summary Import Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {Array&lt;any&gt;} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importDataTypeMappings(containerId: string, dataSourceId: string, body?: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportDataTypeMappingResponse>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).importDataTypeMappings(containerId, dataSourceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.
         * @summary Import Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importDataTypeMappings(containerId: string, dataSourceId: string, file?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportDataTypeMappingResponse>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).importDataTypeMappings(containerId, dataSourceId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists data type mappings for the data source
         * @summary List Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [needsTransformations] boolean indicating if the return should consist of only mappings that need transformations
         * @param {boolean} [count] boolean indicating if the return value should be a count only
         * @param {string} [sortBy] column to sort results by
         * @param {boolean} [sortDesc] boolean indicating if results should be in descending order
         * @param {string} [resultingMetatypeName] if supplied, filters returned transformations by those that produce the resulting metatype
         * @param {string} [resultingMetatypeRelationshipName] if supplied, filters returned transformations by those that produce the resulting metatype relationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDataTypeMappings(containerId: string, dataSourceId: string, limit?: number, offset?: number, needsTransformations?: boolean, count?: boolean, sortBy?: string, sortDesc?: boolean, resultingMetatypeName?: string, resultingMetatypeRelationshipName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataTypeMappingResponse>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).listDataTypeMappings(containerId, dataSourceId, limit, offset, needsTransformations, count, sortBy, sortDesc, resultingMetatypeName, resultingMetatypeRelationshipName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List transformations for a type mapping from storage.
         * @summary List Data Type Mapping's Transformations
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransformations(containerId: string, dataSourceId: string, mappingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTransformationResponse>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).listTransformations(containerId, dataSourceId, mappingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a data type mapping
         * @summary Retrieve Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDataTypeMappingResponse>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).retrieveDataTypeMapping(containerId, dataSourceId, mappingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a data type mapping.
         * @summary Update Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {TypeMapping} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, body?: TypeMapping, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateDataTypeMappingResponse>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).updateDataTypeMapping(containerId, dataSourceId, mappingId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a transformation.
         * @summary Update Data Type Mapping's Transformations
         * @param {CreateTypeMappingTransformationsRequest} body 
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {string} transformationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransformation(body: CreateTypeMappingTransformationsRequest, containerId: string, dataSourceId: string, mappingId: string, transformationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTransformationResponse>> {
            const localVarAxiosArgs = await DataTypeMappingsApiAxiosParamCreator(configuration).updateTransformation(body, containerId, dataSourceId, mappingId, transformationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DataTypeMappingsApi - factory interface
 * @export
 */
export const DataTypeMappingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a transformation for the type mapping.
         * @summary Create Data Type Mapping's Transformations
         * @param {CreateTypeMappingTransformationsRequest} body 
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransformation(body: CreateTypeMappingTransformationsRequest, containerId: string, dataSourceId: string, mappingId: string, options?: any): AxiosPromise<CreateTransformationResponse> {
            return DataTypeMappingsApiFp(configuration).createTransformation(body, containerId, dataSourceId, mappingId, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently remove data type mapping.
         * @summary Delete Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, options?: any): AxiosPromise<Generic200Response> {
            return DataTypeMappingsApiFp(configuration).deleteDataTypeMapping(containerId, dataSourceId, mappingId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a transformation.
         * @summary Delete Data Type Mapping's Transformations
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {string} transformationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransformation(containerId: string, dataSourceId: string, mappingId: string, transformationId: string, options?: any): AxiosPromise<Generic200Response> {
            return DataTypeMappingsApiFp(configuration).deleteTransformation(containerId, dataSourceId, mappingId, transformationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Export type mappings for a datasource. Providing a JSON body is optional. If provided, the mapping_ids may be specified to indicate certain type mapping IDs to return. Additionally, a target data source may be provided to which the mappings will be copied.
         * @summary Export Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {TypeMappingExportPayload} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportTypeMappings(containerId: string, dataSourceId: string, body?: TypeMappingExportPayload, options?: any): AxiosPromise<Array<TypeMapping>> {
            return DataTypeMappingsApiFp(configuration).exportTypeMappings(containerId, dataSourceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.
         * @summary Import Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {Array&lt;any&gt;} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDataTypeMappings(containerId: string, dataSourceId: string, body?: Array<any>, options?: any): AxiosPromise<ImportDataTypeMappingResponse> {
            return DataTypeMappingsApiFp(configuration).importDataTypeMappings(containerId, dataSourceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.
         * @summary Import Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDataTypeMappings(containerId: string, dataSourceId: string, file?: string, options?: any): AxiosPromise<ImportDataTypeMappingResponse> {
            return DataTypeMappingsApiFp(configuration).importDataTypeMappings(containerId, dataSourceId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists data type mappings for the data source
         * @summary List Data Type Mappings
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [needsTransformations] boolean indicating if the return should consist of only mappings that need transformations
         * @param {boolean} [count] boolean indicating if the return value should be a count only
         * @param {string} [sortBy] column to sort results by
         * @param {boolean} [sortDesc] boolean indicating if results should be in descending order
         * @param {string} [resultingMetatypeName] if supplied, filters returned transformations by those that produce the resulting metatype
         * @param {string} [resultingMetatypeRelationshipName] if supplied, filters returned transformations by those that produce the resulting metatype relationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataTypeMappings(containerId: string, dataSourceId: string, limit?: number, offset?: number, needsTransformations?: boolean, count?: boolean, sortBy?: string, sortDesc?: boolean, resultingMetatypeName?: string, resultingMetatypeRelationshipName?: string, options?: any): AxiosPromise<ListDataTypeMappingResponse> {
            return DataTypeMappingsApiFp(configuration).listDataTypeMappings(containerId, dataSourceId, limit, offset, needsTransformations, count, sortBy, sortDesc, resultingMetatypeName, resultingMetatypeRelationshipName, options).then((request) => request(axios, basePath));
        },
        /**
         * List transformations for a type mapping from storage.
         * @summary List Data Type Mapping's Transformations
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransformations(containerId: string, dataSourceId: string, mappingId: string, options?: any): AxiosPromise<ListTransformationResponse> {
            return DataTypeMappingsApiFp(configuration).listTransformations(containerId, dataSourceId, mappingId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a data type mapping
         * @summary Retrieve Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, options?: any): AxiosPromise<GetDataTypeMappingResponse> {
            return DataTypeMappingsApiFp(configuration).retrieveDataTypeMapping(containerId, dataSourceId, mappingId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a data type mapping.
         * @summary Update Data Type Mapping
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {TypeMapping} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, body?: TypeMapping, options?: any): AxiosPromise<UpdateDataTypeMappingResponse> {
            return DataTypeMappingsApiFp(configuration).updateDataTypeMapping(containerId, dataSourceId, mappingId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a transformation.
         * @summary Update Data Type Mapping's Transformations
         * @param {CreateTypeMappingTransformationsRequest} body 
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {string} mappingId 
         * @param {string} transformationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransformation(body: CreateTypeMappingTransformationsRequest, containerId: string, dataSourceId: string, mappingId: string, transformationId: string, options?: any): AxiosPromise<UpdateTransformationResponse> {
            return DataTypeMappingsApiFp(configuration).updateTransformation(body, containerId, dataSourceId, mappingId, transformationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataTypeMappingsApi - object-oriented interface
 * @export
 * @class DataTypeMappingsApi
 * @extends {BaseAPI}
 */
export class DataTypeMappingsApi extends BaseAPI {
    /**
     * Create a transformation for the type mapping.
     * @summary Create Data Type Mapping's Transformations
     * @param {CreateTypeMappingTransformationsRequest} body 
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {string} mappingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public createTransformation(body: CreateTypeMappingTransformationsRequest, containerId: string, dataSourceId: string, mappingId: string, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).createTransformation(body, containerId, dataSourceId, mappingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently remove data type mapping.
     * @summary Delete Data Type Mapping
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {string} mappingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public deleteDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).deleteDataTypeMapping(containerId, dataSourceId, mappingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a transformation.
     * @summary Delete Data Type Mapping's Transformations
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {string} mappingId 
     * @param {string} transformationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public deleteTransformation(containerId: string, dataSourceId: string, mappingId: string, transformationId: string, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).deleteTransformation(containerId, dataSourceId, mappingId, transformationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Export type mappings for a datasource. Providing a JSON body is optional. If provided, the mapping_ids may be specified to indicate certain type mapping IDs to return. Additionally, a target data source may be provided to which the mappings will be copied.
     * @summary Export Type Mappings
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {TypeMappingExportPayload} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public exportTypeMappings(containerId: string, dataSourceId: string, body?: TypeMappingExportPayload, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).exportTypeMappings(containerId, dataSourceId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.
     * @summary Import Data Type Mappings
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {Array&lt;any&gt;} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public importDataTypeMappings(containerId: string, dataSourceId: string, body?: Array<any>, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).importDataTypeMappings(containerId, dataSourceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.
     * @summary Import Data Type Mappings
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {string} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public importDataTypeMappings(containerId: string, dataSourceId: string, file?: string, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).importDataTypeMappings(containerId, dataSourceId, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists data type mappings for the data source
     * @summary List Data Type Mappings
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {boolean} [needsTransformations] boolean indicating if the return should consist of only mappings that need transformations
     * @param {boolean} [count] boolean indicating if the return value should be a count only
     * @param {string} [sortBy] column to sort results by
     * @param {boolean} [sortDesc] boolean indicating if results should be in descending order
     * @param {string} [resultingMetatypeName] if supplied, filters returned transformations by those that produce the resulting metatype
     * @param {string} [resultingMetatypeRelationshipName] if supplied, filters returned transformations by those that produce the resulting metatype relationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public listDataTypeMappings(containerId: string, dataSourceId: string, limit?: number, offset?: number, needsTransformations?: boolean, count?: boolean, sortBy?: string, sortDesc?: boolean, resultingMetatypeName?: string, resultingMetatypeRelationshipName?: string, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).listDataTypeMappings(containerId, dataSourceId, limit, offset, needsTransformations, count, sortBy, sortDesc, resultingMetatypeName, resultingMetatypeRelationshipName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List transformations for a type mapping from storage.
     * @summary List Data Type Mapping's Transformations
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {string} mappingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public listTransformations(containerId: string, dataSourceId: string, mappingId: string, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).listTransformations(containerId, dataSourceId, mappingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a data type mapping
     * @summary Retrieve Data Type Mapping
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {string} mappingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public retrieveDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).retrieveDataTypeMapping(containerId, dataSourceId, mappingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a data type mapping.
     * @summary Update Data Type Mapping
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {string} mappingId 
     * @param {TypeMapping} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public updateDataTypeMapping(containerId: string, dataSourceId: string, mappingId: string, body?: TypeMapping, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).updateDataTypeMapping(containerId, dataSourceId, mappingId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a transformation.
     * @summary Update Data Type Mapping's Transformations
     * @param {CreateTypeMappingTransformationsRequest} body 
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {string} mappingId 
     * @param {string} transformationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypeMappingsApi
     */
    public updateTransformation(body: CreateTypeMappingTransformationsRequest, containerId: string, dataSourceId: string, mappingId: string, transformationId: string, options?: any) {
        return DataTypeMappingsApiFp(this.configuration).updateTransformation(body, containerId, dataSourceId, mappingId, transformationId, options).then((request) => request(this.axios, this.basePath));
    }
}

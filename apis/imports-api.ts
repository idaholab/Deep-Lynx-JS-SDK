/* tslint:disable */
/* eslint-disable */
/**
 * Deep Lynx
 * The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.  The Deep Lynx Core API delivers a few main features.  1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.  2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddDataToImportResponse } from '../models';
import { CreateImportResponse } from '../models';
import { DataSourceIdImportsBody } from '../models';
import { DataStaging } from '../models';
import { Generic200Response } from '../models';
import { GetImportDataResponse } from '../models';
import { ListImportDataResponse } from '../models';
import { UpdateImportDataResponse } from '../models';
/**
 * ImportsApi - axios parameter creator
 * @export
 */
export const ImportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
         * @summary Add Data to Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} dataSourceId 
         * @param {Array&lt;any&gt;} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataToImport: async (containerId: string, importId: string, dataSourceId: string, body?: Array<any>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling addDataToImport.');
            }
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling addDataToImport.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling addDataToImport.');
            }
            const localVarPath = `/containers/{container_id}/datasources/{data_source_id}/imports/{import_id}/data`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication BearerAuth required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
         * @summary Add Data to Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} dataSourceId 
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataToImport: async (containerId: string, importId: string, dataSourceId: string, file?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling addDataToImport.');
            }
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling addDataToImport.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling addDataToImport.');
            }
            const localVarPath = `/containers/{container_id}/datasources/{data_source_id}/imports/{import_id}/data`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication BearerAuth required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new import.
         * @summary Create Import
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {DataSourceIdImportsBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImport: async (containerId: string, dataSourceId: string, body?: DataSourceIdImportsBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling createImport.');
            }
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError('dataSourceId','Required parameter dataSourceId was null or undefined when calling createImport.');
            }
            const localVarPath = `/containers/{container_id}/datasources/{data_source_id}/imports`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete import will delete an import ONLY IF the import has not been processed.
         * @summary Delete Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImport: async (containerId: string, importId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling deleteImport.');
            }
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling deleteImport.');
            }
            const localVarPath = `/containers/{container_id}/import/imports/{import_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a single piece of data from an import.
         * @summary Delete Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImportData: async (containerId: string, importId: string, dataId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling deleteImportData.');
            }
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling deleteImportData.');
            }
            // verify required parameter 'dataId' is not null or undefined
            if (dataId === null || dataId === undefined) {
                throw new RequiredError('dataId','Required parameter dataId was null or undefined when calling deleteImportData.');
            }
            const localVarPath = `/containers/{container_id}/import/imports/{import_id}/data/{data_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"data_id"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List the data for an import.
         * @summary List Import's Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} [count] boolean indicating if the return value should be a count only
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [sortBy] column to sort results by
         * @param {boolean} [sortDesc] boolean indicating if results should be in descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImportsData: async (containerId: string, importId: string, count?: string, limit?: number, offset?: number, sortBy?: string, sortDesc?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling listImportsData.');
            }
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling listImportsData.');
            }
            const localVarPath = `/containers/{container_id}/import/imports/{import_id}/data`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sortDesc'] = sortDesc;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single piece of data from an import.
         * @summary Retrieve Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveImportData: async (containerId: string, importId: string, dataId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling retrieveImportData.');
            }
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling retrieveImportData.');
            }
            // verify required parameter 'dataId' is not null or undefined
            if (dataId === null || dataId === undefined) {
                throw new RequiredError('dataId','Required parameter dataId was null or undefined when calling retrieveImportData.');
            }
            const localVarPath = `/containers/{container_id}/import/imports/{import_id}/data/{data_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"data_id"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the data of an existing import.
         * @summary Update Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {DataStaging} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImportData: async (containerId: string, importId: string, dataId: number, body?: DataStaging, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling updateImportData.');
            }
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling updateImportData.');
            }
            // verify required parameter 'dataId' is not null or undefined
            if (dataId === null || dataId === undefined) {
                throw new RequiredError('dataId','Required parameter dataId was null or undefined when calling updateImportData.');
            }
            const localVarPath = `/containers/{container_id}/import/imports/{import_id}/data/{data_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"data_id"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImportsApi - functional programming interface
 * @export
 */
export const ImportsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
         * @summary Add Data to Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} dataSourceId 
         * @param {Array&lt;any&gt;} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDataToImport(containerId: string, importId: string, dataSourceId: string, body?: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddDataToImportResponse>> {
            const localVarAxiosArgs = await ImportsApiAxiosParamCreator(configuration).addDataToImport(containerId, importId, dataSourceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
         * @summary Add Data to Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} dataSourceId 
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDataToImport(containerId: string, importId: string, dataSourceId: string, file?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddDataToImportResponse>> {
            const localVarAxiosArgs = await ImportsApiAxiosParamCreator(configuration).addDataToImport(containerId, importId, dataSourceId, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new import.
         * @summary Create Import
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {DataSourceIdImportsBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImport(containerId: string, dataSourceId: string, body?: DataSourceIdImportsBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateImportResponse>> {
            const localVarAxiosArgs = await ImportsApiAxiosParamCreator(configuration).createImport(containerId, dataSourceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete import will delete an import ONLY IF the import has not been processed.
         * @summary Delete Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImport(containerId: string, importId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ImportsApiAxiosParamCreator(configuration).deleteImport(containerId, importId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a single piece of data from an import.
         * @summary Delete Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImportData(containerId: string, importId: string, dataId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic200Response>> {
            const localVarAxiosArgs = await ImportsApiAxiosParamCreator(configuration).deleteImportData(containerId, importId, dataId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List the data for an import.
         * @summary List Import's Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} [count] boolean indicating if the return value should be a count only
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [sortBy] column to sort results by
         * @param {boolean} [sortDesc] boolean indicating if results should be in descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listImportsData(containerId: string, importId: string, count?: string, limit?: number, offset?: number, sortBy?: string, sortDesc?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListImportDataResponse>> {
            const localVarAxiosArgs = await ImportsApiAxiosParamCreator(configuration).listImportsData(containerId, importId, count, limit, offset, sortBy, sortDesc, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a single piece of data from an import.
         * @summary Retrieve Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveImportData(containerId: string, importId: string, dataId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetImportDataResponse>> {
            const localVarAxiosArgs = await ImportsApiAxiosParamCreator(configuration).retrieveImportData(containerId, importId, dataId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the data of an existing import.
         * @summary Update Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {DataStaging} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImportData(containerId: string, importId: string, dataId: number, body?: DataStaging, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateImportDataResponse>> {
            const localVarAxiosArgs = await ImportsApiAxiosParamCreator(configuration).updateImportData(containerId, importId, dataId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImportsApi - factory interface
 * @export
 */
export const ImportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
         * @summary Add Data to Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} dataSourceId 
         * @param {Array&lt;any&gt;} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataToImport(containerId: string, importId: string, dataSourceId: string, body?: Array<any>, options?: any): AxiosPromise<AddDataToImportResponse> {
            return ImportsApiFp(configuration).addDataToImport(containerId, importId, dataSourceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
         * @summary Add Data to Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} dataSourceId 
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDataToImport(containerId: string, importId: string, dataSourceId: string, file?: string, options?: any): AxiosPromise<AddDataToImportResponse> {
            return ImportsApiFp(configuration).addDataToImport(containerId, importId, dataSourceId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new import.
         * @summary Create Import
         * @param {string} containerId 
         * @param {string} dataSourceId 
         * @param {DataSourceIdImportsBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImport(containerId: string, dataSourceId: string, body?: DataSourceIdImportsBody, options?: any): AxiosPromise<CreateImportResponse> {
            return ImportsApiFp(configuration).createImport(containerId, dataSourceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete import will delete an import ONLY IF the import has not been processed.
         * @summary Delete Import
         * @param {string} containerId 
         * @param {string} importId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImport(containerId: string, importId: string, options?: any): AxiosPromise<void> {
            return ImportsApiFp(configuration).deleteImport(containerId, importId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a single piece of data from an import.
         * @summary Delete Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImportData(containerId: string, importId: string, dataId: number, options?: any): AxiosPromise<Generic200Response> {
            return ImportsApiFp(configuration).deleteImportData(containerId, importId, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * List the data for an import.
         * @summary List Import's Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {string} [count] boolean indicating if the return value should be a count only
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [sortBy] column to sort results by
         * @param {boolean} [sortDesc] boolean indicating if results should be in descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImportsData(containerId: string, importId: string, count?: string, limit?: number, offset?: number, sortBy?: string, sortDesc?: boolean, options?: any): AxiosPromise<ListImportDataResponse> {
            return ImportsApiFp(configuration).listImportsData(containerId, importId, count, limit, offset, sortBy, sortDesc, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single piece of data from an import.
         * @summary Retrieve Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveImportData(containerId: string, importId: string, dataId: number, options?: any): AxiosPromise<GetImportDataResponse> {
            return ImportsApiFp(configuration).retrieveImportData(containerId, importId, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the data of an existing import.
         * @summary Update Import Data
         * @param {string} containerId 
         * @param {string} importId 
         * @param {number} dataId 
         * @param {DataStaging} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImportData(containerId: string, importId: string, dataId: number, body?: DataStaging, options?: any): AxiosPromise<UpdateImportDataResponse> {
            return ImportsApiFp(configuration).updateImportData(containerId, importId, dataId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImportsApi - object-oriented interface
 * @export
 * @class ImportsApi
 * @extends {BaseAPI}
 */
export class ImportsApi extends BaseAPI {
    /**
     * Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
     * @summary Add Data to Import
     * @param {string} containerId 
     * @param {string} importId 
     * @param {string} dataSourceId 
     * @param {Array&lt;any&gt;} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportsApi
     */
    public addDataToImport(containerId: string, importId: string, dataSourceId: string, body?: Array<any>, options?: any) {
        return ImportsApiFp(this.configuration).addDataToImport(containerId, importId, dataSourceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
     * @summary Add Data to Import
     * @param {string} containerId 
     * @param {string} importId 
     * @param {string} dataSourceId 
     * @param {string} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportsApi
     */
    public addDataToImport(containerId: string, importId: string, dataSourceId: string, file?: string, options?: any) {
        return ImportsApiFp(this.configuration).addDataToImport(containerId, importId, dataSourceId, file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new import.
     * @summary Create Import
     * @param {string} containerId 
     * @param {string} dataSourceId 
     * @param {DataSourceIdImportsBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportsApi
     */
    public createImport(containerId: string, dataSourceId: string, body?: DataSourceIdImportsBody, options?: any) {
        return ImportsApiFp(this.configuration).createImport(containerId, dataSourceId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete import will delete an import ONLY IF the import has not been processed.
     * @summary Delete Import
     * @param {string} containerId 
     * @param {string} importId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportsApi
     */
    public deleteImport(containerId: string, importId: string, options?: any) {
        return ImportsApiFp(this.configuration).deleteImport(containerId, importId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a single piece of data from an import.
     * @summary Delete Import Data
     * @param {string} containerId 
     * @param {string} importId 
     * @param {number} dataId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportsApi
     */
    public deleteImportData(containerId: string, importId: string, dataId: number, options?: any) {
        return ImportsApiFp(this.configuration).deleteImportData(containerId, importId, dataId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List the data for an import.
     * @summary List Import's Data
     * @param {string} containerId 
     * @param {string} importId 
     * @param {string} [count] boolean indicating if the return value should be a count only
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [sortBy] column to sort results by
     * @param {boolean} [sortDesc] boolean indicating if results should be in descending order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportsApi
     */
    public listImportsData(containerId: string, importId: string, count?: string, limit?: number, offset?: number, sortBy?: string, sortDesc?: boolean, options?: any) {
        return ImportsApiFp(this.configuration).listImportsData(containerId, importId, count, limit, offset, sortBy, sortDesc, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single piece of data from an import.
     * @summary Retrieve Import Data
     * @param {string} containerId 
     * @param {string} importId 
     * @param {number} dataId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportsApi
     */
    public retrieveImportData(containerId: string, importId: string, dataId: number, options?: any) {
        return ImportsApiFp(this.configuration).retrieveImportData(containerId, importId, dataId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the data of an existing import.
     * @summary Update Import Data
     * @param {string} containerId 
     * @param {string} importId 
     * @param {number} dataId 
     * @param {DataStaging} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportsApi
     */
    public updateImportData(containerId: string, importId: string, dataId: number, body?: DataStaging, options?: any) {
        return ImportsApiFp(this.configuration).updateImportData(containerId, importId, dataId, body, options).then((request) => request(this.axios, this.basePath));
    }
}

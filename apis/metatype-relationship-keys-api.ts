/* tslint:disable */
/* eslint-disable */
/**
 * Deep Lynx
 * The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.  The Deep Lynx Core API delivers a few main features.  1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.  2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateMetatypeRelationshipKeysResponse } from '../models';
import { Generic200Response } from '../models';
import { GetMetatypeRelationshipKeyResponse } from '../models';
import { ListMetatypeRelationshipKeysResponse } from '../models';
import { NewMetatypeRelationshipKeyRequest } from '../models';
import { RelationshipKey } from '../models';
import { UpdateMetatypeRelationshipKeyResponse } from '../models';
/**
 * MetatypeRelationshipKeysApi - axios parameter creator
 * @export
 */
export const MetatypeRelationshipKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Archives a Metatype Relationship Key.
         * @summary ArchiveMetatypeRelationshipKey
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveMetatypeRelationshipKey: async (containerId: string, relationshipId: string, keyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling archiveMetatypeRelationshipKey.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling archiveMetatypeRelationshipKey.');
            }
            // verify required parameter 'keyId' is not null or undefined
            if (keyId === null || keyId === undefined) {
                throw new RequiredError('keyId','Required parameter keyId was null or undefined when calling archiveMetatypeRelationshipKey.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships/{relationship_id}/keys/{key_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)))
                .replace(`{${"key_id"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new key for a metatype relationship. Keys consist of a unique key name (unique to the metatype relationship), key type, default values, and allowed values. Of those, only the first two are required.  The `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration, file.   The fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.
         * @summary CreateMetatypeRelationshipKey
         * @param {NewMetatypeRelationshipKeyRequest} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetatypeRelationshipKey: async (body: NewMetatypeRelationshipKeyRequest, containerId: string, relationshipId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMetatypeRelationshipKey.');
            }
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling createMetatypeRelationshipKey.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling createMetatypeRelationshipKey.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships/{relationship_id}/keys`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all keys for a Metatype Relationship.
         * @summary ListMetatypeRelationshipKeys
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMetatypeRelationshipKeys: async (containerId: string, relationshipId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling listMetatypeRelationshipKeys.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling listMetatypeRelationshipKeys.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships/{relationship_id}/keys`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single key for a Metatype Relationship by id.
         * @summary RetrieveMetatypeRelationshipKey
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMetatypeRelationshipKey: async (containerId: string, relationshipId: string, keyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling retrieveMetatypeRelationshipKey.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling retrieveMetatypeRelationshipKey.');
            }
            // verify required parameter 'keyId' is not null or undefined
            if (keyId === null || keyId === undefined) {
                throw new RequiredError('keyId','Required parameter keyId was null or undefined when calling retrieveMetatypeRelationshipKey.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships/{relationship_id}/keys/{key_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)))
                .replace(`{${"key_id"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Metatype Relationship key. The update must follow the same format as creation.
         * @summary UpdateMetatypeRelationshipKey
         * @param {RelationshipKey} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetatypeRelationshipKey: async (body: RelationshipKey, containerId: string, relationshipId: string, keyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMetatypeRelationshipKey.');
            }
            // verify required parameter 'containerId' is not null or undefined
            if (containerId === null || containerId === undefined) {
                throw new RequiredError('containerId','Required parameter containerId was null or undefined when calling updateMetatypeRelationshipKey.');
            }
            // verify required parameter 'relationshipId' is not null or undefined
            if (relationshipId === null || relationshipId === undefined) {
                throw new RequiredError('relationshipId','Required parameter relationshipId was null or undefined when calling updateMetatypeRelationshipKey.');
            }
            // verify required parameter 'keyId' is not null or undefined
            if (keyId === null || keyId === undefined) {
                throw new RequiredError('keyId','Required parameter keyId was null or undefined when calling updateMetatypeRelationshipKey.');
            }
            const localVarPath = `/containers/{container_id}/metatype_relationships/{relationship_id}/keys/{key_id}`
                .replace(`{${"container_id"}}`, encodeURIComponent(String(containerId)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)))
                .replace(`{${"key_id"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetatypeRelationshipKeysApi - functional programming interface
 * @export
 */
export const MetatypeRelationshipKeysApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Archives a Metatype Relationship Key.
         * @summary ArchiveMetatypeRelationshipKey
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveMetatypeRelationshipKey(containerId: string, relationshipId: string, keyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Generic200Response>> {
            const localVarAxiosArgs = await MetatypeRelationshipKeysApiAxiosParamCreator(configuration).archiveMetatypeRelationshipKey(containerId, relationshipId, keyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new key for a metatype relationship. Keys consist of a unique key name (unique to the metatype relationship), key type, default values, and allowed values. Of those, only the first two are required.  The `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration, file.   The fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.
         * @summary CreateMetatypeRelationshipKey
         * @param {NewMetatypeRelationshipKeyRequest} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMetatypeRelationshipKey(body: NewMetatypeRelationshipKeyRequest, containerId: string, relationshipId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMetatypeRelationshipKeysResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipKeysApiAxiosParamCreator(configuration).createMetatypeRelationshipKey(body, containerId, relationshipId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all keys for a Metatype Relationship.
         * @summary ListMetatypeRelationshipKeys
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMetatypeRelationshipKeys(containerId: string, relationshipId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMetatypeRelationshipKeysResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipKeysApiAxiosParamCreator(configuration).listMetatypeRelationshipKeys(containerId, relationshipId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a single key for a Metatype Relationship by id.
         * @summary RetrieveMetatypeRelationshipKey
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveMetatypeRelationshipKey(containerId: string, relationshipId: string, keyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMetatypeRelationshipKeyResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipKeysApiAxiosParamCreator(configuration).retrieveMetatypeRelationshipKey(containerId, relationshipId, keyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Metatype Relationship key. The update must follow the same format as creation.
         * @summary UpdateMetatypeRelationshipKey
         * @param {RelationshipKey} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetatypeRelationshipKey(body: RelationshipKey, containerId: string, relationshipId: string, keyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMetatypeRelationshipKeyResponse>> {
            const localVarAxiosArgs = await MetatypeRelationshipKeysApiAxiosParamCreator(configuration).updateMetatypeRelationshipKey(body, containerId, relationshipId, keyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetatypeRelationshipKeysApi - factory interface
 * @export
 */
export const MetatypeRelationshipKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Archives a Metatype Relationship Key.
         * @summary ArchiveMetatypeRelationshipKey
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveMetatypeRelationshipKey(containerId: string, relationshipId: string, keyId: string, options?: any): AxiosPromise<Generic200Response> {
            return MetatypeRelationshipKeysApiFp(configuration).archiveMetatypeRelationshipKey(containerId, relationshipId, keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new key for a metatype relationship. Keys consist of a unique key name (unique to the metatype relationship), key type, default values, and allowed values. Of those, only the first two are required.  The `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration, file.   The fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.
         * @summary CreateMetatypeRelationshipKey
         * @param {NewMetatypeRelationshipKeyRequest} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetatypeRelationshipKey(body: NewMetatypeRelationshipKeyRequest, containerId: string, relationshipId: string, options?: any): AxiosPromise<CreateMetatypeRelationshipKeysResponse> {
            return MetatypeRelationshipKeysApiFp(configuration).createMetatypeRelationshipKey(body, containerId, relationshipId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all keys for a Metatype Relationship.
         * @summary ListMetatypeRelationshipKeys
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMetatypeRelationshipKeys(containerId: string, relationshipId: string, options?: any): AxiosPromise<ListMetatypeRelationshipKeysResponse> {
            return MetatypeRelationshipKeysApiFp(configuration).listMetatypeRelationshipKeys(containerId, relationshipId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single key for a Metatype Relationship by id.
         * @summary RetrieveMetatypeRelationshipKey
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMetatypeRelationshipKey(containerId: string, relationshipId: string, keyId: string, options?: any): AxiosPromise<GetMetatypeRelationshipKeyResponse> {
            return MetatypeRelationshipKeysApiFp(configuration).retrieveMetatypeRelationshipKey(containerId, relationshipId, keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Metatype Relationship key. The update must follow the same format as creation.
         * @summary UpdateMetatypeRelationshipKey
         * @param {RelationshipKey} body 
         * @param {string} containerId 
         * @param {string} relationshipId 
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetatypeRelationshipKey(body: RelationshipKey, containerId: string, relationshipId: string, keyId: string, options?: any): AxiosPromise<UpdateMetatypeRelationshipKeyResponse> {
            return MetatypeRelationshipKeysApiFp(configuration).updateMetatypeRelationshipKey(body, containerId, relationshipId, keyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetatypeRelationshipKeysApi - object-oriented interface
 * @export
 * @class MetatypeRelationshipKeysApi
 * @extends {BaseAPI}
 */
export class MetatypeRelationshipKeysApi extends BaseAPI {
    /**
     * Archives a Metatype Relationship Key.
     * @summary ArchiveMetatypeRelationshipKey
     * @param {string} containerId 
     * @param {string} relationshipId 
     * @param {string} keyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipKeysApi
     */
    public archiveMetatypeRelationshipKey(containerId: string, relationshipId: string, keyId: string, options?: any) {
        return MetatypeRelationshipKeysApiFp(this.configuration).archiveMetatypeRelationshipKey(containerId, relationshipId, keyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new key for a metatype relationship. Keys consist of a unique key name (unique to the metatype relationship), key type, default values, and allowed values. Of those, only the first two are required.  The `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration, file.   The fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.
     * @summary CreateMetatypeRelationshipKey
     * @param {NewMetatypeRelationshipKeyRequest} body 
     * @param {string} containerId 
     * @param {string} relationshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipKeysApi
     */
    public createMetatypeRelationshipKey(body: NewMetatypeRelationshipKeyRequest, containerId: string, relationshipId: string, options?: any) {
        return MetatypeRelationshipKeysApiFp(this.configuration).createMetatypeRelationshipKey(body, containerId, relationshipId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves all keys for a Metatype Relationship.
     * @summary ListMetatypeRelationshipKeys
     * @param {string} containerId 
     * @param {string} relationshipId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipKeysApi
     */
    public listMetatypeRelationshipKeys(containerId: string, relationshipId: string, options?: any) {
        return MetatypeRelationshipKeysApiFp(this.configuration).listMetatypeRelationshipKeys(containerId, relationshipId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single key for a Metatype Relationship by id.
     * @summary RetrieveMetatypeRelationshipKey
     * @param {string} containerId 
     * @param {string} relationshipId 
     * @param {string} keyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipKeysApi
     */
    public retrieveMetatypeRelationshipKey(containerId: string, relationshipId: string, keyId: string, options?: any) {
        return MetatypeRelationshipKeysApiFp(this.configuration).retrieveMetatypeRelationshipKey(containerId, relationshipId, keyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a Metatype Relationship key. The update must follow the same format as creation.
     * @summary UpdateMetatypeRelationshipKey
     * @param {RelationshipKey} body 
     * @param {string} containerId 
     * @param {string} relationshipId 
     * @param {string} keyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetatypeRelationshipKeysApi
     */
    public updateMetatypeRelationshipKey(body: RelationshipKey, containerId: string, relationshipId: string, keyId: string, options?: any) {
        return MetatypeRelationshipKeysApiFp(this.configuration).updateMetatypeRelationshipKey(body, containerId, relationshipId, keyId, options).then((request) => request(this.axios, this.basePath));
    }
}
